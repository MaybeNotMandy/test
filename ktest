local SimpleKavo = {}

-- Serviços
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Temas pré-definidos (ATUALIZADO COM BLOODTHEME)
local Themes = {
    DarkTheme = {
        SchemeColor = Color3.fromRGB(64, 64, 64),
        Background = Color3.fromRGB(0, 0, 0),
        Header = Color3.fromRGB(0, 0, 0),
        TextColor = Color3.fromRGB(255, 255, 255),
        ElementColor = Color3.fromRGB(20, 20, 20)
    },
    LightTheme = {
        SchemeColor = Color3.fromRGB(150, 150, 150),
        Background = Color3.fromRGB(255, 255, 255),
        Header = Color3.fromRGB(200, 200, 200),
        TextColor = Color3.fromRGB(0, 0, 0),
        ElementColor = Color3.fromRGB(224, 224, 224)
    },
    BloodTheme = {  -- NOVO TEMA ADICIONADO
        SchemeColor = Color3.fromRGB(227, 27, 27),  -- Vermelho sangue
        Background = Color3.fromRGB(10, 10, 10),    -- Preto quase puro
        Header = Color3.fromRGB(5, 5, 5),           -- Preto mais escuro
        TextColor = Color3.fromRGB(255, 255, 255),  -- Texto branco
        ElementColor = Color3.fromRGB(20, 20, 20)   -- Elementos escuros
    },
    Default = {
        SchemeColor = Color3.fromRGB(74, 99, 135),
        Background = Color3.fromRGB(36, 37, 43),
        Header = Color3.fromRGB(28, 29, 34),
        TextColor = Color3.fromRGB(255, 255, 255),
        ElementColor = Color3.fromRGB(32, 32, 38)
    }
}


-- Função para criar tweens
local function Tween(object, properties, duration)
    local tweenInfo = TweenInfo.new(duration or 0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

-- Função para habilitar arrastar
function SimpleKavo:DraggingEnabled(frame, parent)
    parent = parent or frame
    local dragging = false
    local dragInput, mousePos, framePos

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = parent.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            parent.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
        end
    end)
end

-- Função principal
function SimpleKavo.CreateLib(title, themeName)
    -- Seleciona o tema
    local theme = Themes[themeName] or Themes.Default
    
    -- Cria a ScreenGui
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = game.CoreGui
    ScreenGui.Name = "SimpleKavo_"..tostring(math.random(1, 10000))
    ScreenGui.ResetOnSpawn = false
    
    -- Janela principal
    local Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.Parent = ScreenGui
    Main.BackgroundColor3 = theme.Background
    Main.Position = UDim2.new(0.3, 0, 0.3, 0)
    Main.Size = UDim2.new(0, 500, 0, 350)
    Main.ClipsDescendants = true
    
    local MainCorner = Instance.new("UICorner")
    MainCorner.CornerRadius = UDim.new(0, 6)
    MainCorner.Parent = Main
    
    -- Cabeçalho
    local Header = Instance.new("Frame")
    Header.Name = "Header"
    Header.Parent = Main
    Header.BackgroundColor3 = theme.Header
    Header.Size = UDim2.new(1, 0, 0, 30)
    
    local HeaderCorner = Instance.new("UICorner")
    HeaderCorner.CornerRadius = UDim.new(0, 6)
    HeaderCorner.Parent = Header
    
    -- Título
    local Title = Instance.new("TextLabel")
    Title.Parent = Header
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0.05, 0, 0, 0)
    Title.Size = UDim2.new(0.8, 0, 1, 0)
    Title.Font = Enum.Font.Gotham
    Title.Text = title
    Title.TextColor3 = theme.TextColor
    Title.TextSize = 16
    Title.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Botão de fechar
    local Close = Instance.new("ImageButton")
    Close.Parent = Header
    Close.BackgroundTransparency = 1
    Close.AnchorPoint = Vector2.new(1, 0)
    Close.Position = UDim2.new(1, -5, 0.15, 0)
    Close.Size = UDim2.new(0, 20, 0, 20)
    Close.Image = "rbxassetid://3926305904"
    Close.ImageRectOffset = Vector2.new(284, 4)
    Close.ImageRectSize = Vector2.new(24, 24)
    Close.MouseButton1Click:Connect(function()
        Tween(Main, {Size = UDim2.new(0, 0, 0, 0)})
        wait(0.3)
        ScreenGui:Destroy()
    end)
    
    -- Botão de minimizar (posicionado acima e à esquerda do GUI principal)
    local Minimize = Instance.new("ImageButton")
    Minimize.Parent = ScreenGui
    Minimize.Name = "MinimizeButton"
    Minimize.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    Minimize.BackgroundTransparency = 0.5
    Minimize.Size = UDim2.new(0, 40, 0, 40)
    Minimize.Position = UDim2.new(0.3, -45, 0.3, -50)  -- 45px à esquerda e 50px acima do GUI
    Minimize.Image = "rbxassetid://3926305904"
    Minimize.ImageRectOffset = Vector2.new(124, 4)
    Minimize.ImageRectSize = Vector2.new(24, 24)
    
    local MinimizeCorner = Instance.new("UICorner")
    MinimizeCorner.CornerRadius = UDim.new(0, 8)
    MinimizeCorner.Parent = Minimize
    
    -- Habilita arrastar para o botão de minimizar
    SimpleKavo:DraggingEnabled(Minimize)
    
    local Minimized = false
    Minimize.MouseButton1Click:Connect(function()
        Minimized = not Minimized
        if Minimized then
            Tween(Main, {Size = UDim2.new(0, 0, 0, 0)})
            Minimize.ImageRectOffset = Vector2.new(84, 4)
        else
            Tween(Main, {Size = UDim2.new(0, 500, 0, 350)})
            Minimize.ImageRectOffset = Vector2.new(124, 4)
        end
    end)
    
    -- Habilita arrastar para o cabeçalho da janela
    SimpleKavo:DraggingEnabled(Header, Main)
    
    -- Área de abas
    local TabsHolder = Instance.new("Frame")
    TabsHolder.Name = "TabsHolder"
    TabsHolder.Parent = Main
    TabsHolder.BackgroundColor3 = theme.Header
    TabsHolder.Position = UDim2.new(0, 0, 0, 30)
    TabsHolder.Size = UDim2.new(0, 150, 1, -30)
    
    local TabsList = Instance.new("UIListLayout")
    TabsList.Parent = TabsHolder
    TabsList.Padding = UDim.new(0, 5)
    
    -- Área de conteúdo
    local Content = Instance.new("Frame")
    Content.Name = "Content"
    Content.Parent = Main
    Content.BackgroundTransparency = 1
    Content.Position = UDim2.new(0, 150, 0, 30)
    Content.Size = UDim2.new(1, -150, 1, -30)
    
    -- Função para adicionar aba
    function SimpleKavo:AddTab(name)
        local TabButton = Instance.new("TextButton")
        TabButton.Name = name
        TabButton.Parent = TabsHolder
        TabButton.BackgroundColor3 = theme.SchemeColor
        TabButton.Size = UDim2.new(0.9, 0, 0, 30)
        TabButton.Font = Enum.Font.Gotham
        TabButton.Text = name
        TabButton.TextColor3 = theme.TextColor
        TabButton.TextSize = 14
        
        local TabCorner = Instance.new("UICorner")
        TabCorner.CornerRadius = UDim.new(0, 4)
        TabCorner.Parent = TabButton
        
        local TabContent = Instance.new("ScrollingFrame")
        TabContent.Name = name.."_Content"
        TabContent.Parent = Content
        TabContent.BackgroundTransparency = 1
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.Visible = false
        TabContent.ScrollBarThickness = 5
        TabContent.ScrollBarImageColor3 = theme.SchemeColor
        
        local TabContentList = Instance.new("UIListLayout")
        TabContentList.Parent = TabContent
        TabContentList.Padding = UDim.new(0, 5)
        
        -- Mostrar/ocultar aba
        TabButton.MouseButton1Click:Connect(function()
            for _, tab in pairs(Content:GetChildren()) do
                if tab:IsA("ScrollingFrame") then
                    tab.Visible = false
                end
            end
            TabContent.Visible = true
        end)
        
        -- Mostrar primeira aba por padrão
        if #TabsHolder:GetChildren() == 1 then
            TabContent.Visible = true
        end
        
        -- Funções da aba
        local TabFunctions = {}
        
        function TabFunctions:AddButton(name, callback)
            local Button = Instance.new("TextButton")
            Button.Name = name
            Button.Parent = TabContent
            Button.BackgroundColor3 = theme.ElementColor
            Button.Size = UDim2.new(0.95, 0, 0, 35)
            Button.Font = Enum.Font.Gotham
            Button.Text = name
            Button.TextColor3 = theme.TextColor
            Button.TextSize = 14
            
            local ButtonCorner = Instance.new("UICorner")
            ButtonCorner.CornerRadius = UDim.new(0, 4)
            ButtonCorner.Parent = Button
            
            Button.MouseButton1Click:Connect(function()
                if callback then callback() end
            end)
            
            return Button
        end
        
        function TabFunctions:AddToggle(name, default, callback)
            local ToggleFrame = Instance.new("Frame")
            ToggleFrame.Name = name.."_Toggle"
            ToggleFrame.Parent = TabContent
            ToggleFrame.BackgroundTransparency = 1
            ToggleFrame.Size = UDim2.new(0.95, 0, 0, 35)
            
            local ToggleButton = Instance.new("TextButton")
            ToggleButton.Name = "Button"
            ToggleButton.Parent = ToggleFrame
            ToggleButton.BackgroundColor3 = theme.ElementColor
            ToggleButton.Size = UDim2.new(0.2, 0, 0.8, 0)
            ToggleButton.Position = UDim2.new(0.75, 0, 0.1, 0)
            ToggleButton.Font = Enum.Font.Gotham
            ToggleButton.Text = ""
            ToggleButton.TextColor3 = theme.TextColor
            ToggleButton.TextSize = 14
            
            local ToggleCorner = Instance.new("UICorner")
            ToggleCorner.Parent = ToggleButton
            
            local ToggleText = Instance.new("TextLabel")
            ToggleText.Name = "Text"
            ToggleText.Parent = ToggleFrame
            ToggleText.BackgroundTransparency = 1
            ToggleText.Size = UDim2.new(0.7, 0, 1, 0)
            ToggleText.Font = Enum.Font.Gotham
            ToggleText.Text = name
            ToggleText.TextColor3 = theme.TextColor
            ToggleText.TextSize = 14
            ToggleText.TextXAlignment = Enum.TextXAlignment.Left
            
            local State = default or false
            
            local function UpdateToggle()
                if State then
                    ToggleButton.BackgroundColor3 = theme.SchemeColor
                else
                    ToggleButton.BackgroundColor3 = theme.ElementColor
                end
            end
            
            UpdateToggle()
            
            ToggleButton.MouseButton1Click:Connect(function()
                State = not State
                UpdateToggle()
                if callback then callback(State) end
            end)
            
            return {
                Set = function(value)
                    State = value
                    UpdateToggle()
                end,
                Get = function()
                    return State
                end
            }
        end
        
        function TabFunctions:AddSlider(name, min, max, default, callback)
            local SliderFrame = Instance.new("Frame")
            SliderFrame.Name = name.."_Slider"
            SliderFrame.Parent = TabContent
            SliderFrame.BackgroundTransparency = 1
            SliderFrame.Size = UDim2.new(0.95, 0, 0, 50)
            
            local SliderText = Instance.new("TextLabel")
            SliderText.Name = "Text"
            SliderText.Parent = SliderFrame
            SliderText.BackgroundTransparency = 1
            SliderText.Size = UDim2.new(1, 0, 0.4, 0)
            SliderText.Font = Enum.Font.Gotham
            SliderText.Text = name..": "..default
            SliderText.TextColor3 = theme.TextColor
            SliderText.TextSize = 14
            SliderText.TextXAlignment = Enum.TextXAlignment.Left
            
            local SliderBar = Instance.new("Frame")
            SliderBar.Name = "Bar"
            SliderBar.Parent = SliderFrame
            SliderBar.BackgroundColor3 = theme.ElementColor
            SliderBar.Size = UDim2.new(1, 0, 0.2, 0)
            SliderBar.Position = UDim2.new(0, 0, 0.6, 0)
            
            local SliderCorner = Instance.new("UICorner")
            SliderCorner.Parent = SliderBar
            
            local SliderFill = Instance.new("Frame")
            SliderFill.Name = "Fill"
            SliderFill.Parent = SliderBar
            SliderFill.BackgroundColor3 = theme.SchemeColor
            SliderFill.Size = UDim2.new((default - min)/(max - min), 0, 1, 0)
            
            local SliderFillCorner = Instance.new("UICorner")
            SliderFillCorner.Parent = SliderFill
            
            local dragging = false
            
            local function UpdateSlider(value)
                local percent = math.clamp((value - min)/(max - min), 0, 1)
                SliderFill.Size = UDim2.new(percent, 0, 1, 0)
                SliderText.Text = name..": "..math.floor(value)
                if callback then callback(value) end
            end
            
            SliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                end
            end)
            
            SliderBar.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local pos = input.Position.X - SliderBar.AbsolutePosition.X
                    local percent = math.clamp(pos/SliderBar.AbsoluteSize.X, 0, 1)
                    local value = min + (max - min) * percent
                    UpdateSlider(value)
                end
            end)
            
            return {
                Set = function(value)
                    UpdateSlider(math.clamp(value, min, max))
                end,
                Get = function()
                    return tonumber(string.match(SliderText.Text, "%d+"))
                end
            }
        end
        
        return TabFunctions
    end
    
    -- Retorna a interface com as funções principais
    return {
        AddTab = SimpleKavo.AddTab,
        ToggleUI = function()
            ScreenGui.Enabled = not ScreenGui.Enabled
        end,
        Destroy = function()
            ScreenGui:Destroy()
        end,
        Minimize = function()
            Minimized = not Minimized
            if Minimized then
                Tween(Main, {Size = UDim2.new(0, 0, 0, 0)})
                Minimize.ImageRectOffset = Vector2.new(84, 4)
            else
                Tween(Main, {Size = UDim2.new(0, 500, 0, 350)})
                Minimize.ImageRectOffset = Vector2.new(124, 4)
            end
        end
    }
end

return SimpleKavo
